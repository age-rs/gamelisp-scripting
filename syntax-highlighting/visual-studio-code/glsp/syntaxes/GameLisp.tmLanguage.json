{
    "name": "GameLisp",
    "scopeName": "source.glsp",
    "fileTypes": ["glsp"],
    "patterns": [
        {
            "begin": "r(#*)\"",
            "end": "\"\\1",
            "name": "string.quoted.double.raw.glsp"
        },
        {
            "begin": "\"",
            "end": "(?<!\\\\)\"",
            "name": "string.quoted.double.glsp",
            "patterns": [
                {
                    "begin": "(?<!{){(?!{)",
                    "end": "(?<!})}(?!})",
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                }
            ]
        },

        {
            "match": "\\\\(space|tab|newline|return|nul)\\b",
            "name": "constant.numeric.integer.other.glsp"
        },
        {
            "match": "\\\\x[0-7]\\h",
            "name": "constant.numeric.integer.other.glsp"
        },
        {
            "match": "\\\\u{\\h\\h?\\h?\\h?\\h?\\h?}",
            "name": "constant.numeric.integer.other.glsp"
        },
        {
            "match": "\\\\.",
            "name": "constant.numeric.integer.other.glsp"
        },

        {
            "match": "-?[\\d_]*\\d[\\d_]*\\b",
            "name": "constant.numeric.integer.decimal.glsp"
        },
        {
            "match": "0b[01_]*[01][01_]*\\b",
            "name": "constant.numeric.integer.binary.glsp"
        },
        {
            "match": "0o[0-7_]*[0-7][0-7_]*\\b",
            "name": "constant.numeric.integer.octal.glsp"
        },
        {
            "match": "0x[\\h_]*\\h[\\h_]*\\b",
            "name": "constant.numeric.integer.hexadecimal.glsp"
        },

        {
            "match": "\\#(t|f|n)\\b",
            "name": "constant.language.glsp"
        },

        {
            "match": "(\\()(def|defn|defmacro|defclass|defmixin|defstruct|state\\*|state|fsm|load|require)\\b(?!-)",
            "captures": {
                "2": { "name": "storage.type.glsp" }
            }
        },
        {
            "match": "(\\()(let|let-fn|let-macro|let-class|let-mixin|fn0|fn1|fn|field|const|prop|wrap-prop|met|wrap|init-state|init-mixin|init|fini-state|fini-mixin|fini|mixin)\\b(?!-)",
            "captures": {
                "2": { "name": "storage.type.glsp keyword.declaration.other.glsp" }
            }
        },
        {
            "match": "(\\()(if|when|unless|while|until|cond==|cond-eq\\?|cond-same\\?|cond|return|yield|else|any-of|forni|forn|for|block|restart-block|finish-block|in|do|break|continue|\\@base|\\@enab!|\\@enab\\?|\\@disab!|enab!|enab\\?|disab!|match|matches\\?|when-let)\\b(?!-)",
            "captures": {
                "2": { "name": "keyword.control.glsp" }
            }
        },

        {
            "match": "\\(",
            "name": "punctuation.section.parens.begin.glsp"
        },
        {
            "match": "\\)",
            "name": "punctuation.section.parens.end.glsp"
        },

        {
            "match": ";.*$",
            "name": "comment.line.glsp"
        },
        {
            "match": "\\#\\;",
            "name": "comment.block.glsp"
        },
        {
            "begin": "\\#\\|",
            "end": "\\|\\#",
            "name": "comment.block.glsp",
            "patterns": [
                {
                    "include": "#block-comment"
                }
            ]
        }
    ],
    "repository": {
        "block-comment": {
            "begin": "\\#\\|",
            "end": "\\|\\#",
            "patterns": [
                {
                    "include": "#block-comment"
                }
            ]
        }
    }
}
